import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { useAtom } from "jotai";
import { userIdAtom } from "./index";
import { useEffect } from "react";
import { useRouter } from "next/router";

const WaitingPage: NextPage = () => {
  const [userId, setUserId] = useAtom(userIdAtom);
  const startDateQuery = trpc.useQuery(["users.startDate", { userId }], {
    refetchOnWindowFocus: false,
    cacheTime: 0,
    staleTime: 0,
  });
  const getDateQuery = trpc.useQuery(["users.getDate", { userId }], {
    refetchOnWindowFocus: false,
    cacheTime: 0,
    staleTime: 0,
  });
  const setStatusMutation = trpc.useMutation("users.setStatus");
  const router = useRouter();

  useEffect(() => {
    if (!userId) return;
    setStatusMutation.mutate({ userId, status: "waiting" });
  }, []);

  // on first render, we try to find a user to start a date with
  useEffect(() => {
    if (!startDateQuery.data) return;
    const date = startDateQuery.data;
    router.push(`/chatting/${date.id}`);
  }, [startDateQuery.data]);

  // on interval trigger, and there was a date, we go there
  useEffect(() => {
    const date = getDateQuery.data;
    if (date) {
      router.push(`/chatting/${date.id}`);
    }
  }, [getDateQuery.data, router]);

  // the interval trigger fetching if someone started a date with us
  useEffect(() => {
    console.log(getDateQuery?.data);
    const interval = setInterval(() => {
      getDateQuery.refetch();
    }, 5000);

    return () => {
      clearInterval(interval);
    };
  }, [getDateQuery]);

  return (
    <>
      <Head>
        <title>Waiting for Users</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col gap-6 items-center justify-center min-h-screen p-4">
        <h3 className="text-xl">Waiting for Users to Connect With...</h3>
        <div>
          <img src="/puff.svg" />
        </div>
      </main>
    </>
  );
};

export default WaitingPage;
