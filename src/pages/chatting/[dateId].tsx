import {
  IAgoraRTCRemoteUser,
  ICameraVideoTrack,
  IRemoteVideoTrack,
} from "agora-rtc-sdk-ng";
import { atom, useAtom } from "jotai";
import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import Countdown from "react-countdown";
import { trpc } from "../../utils/trpc";
import { userIdAtom } from "../index";

const APP_ID = process.env.NEXT_PUBLIC_AGORA_APP_ID;
export const dateIdAtom = atom("");

const VideoPlayer = ({
  videoTrack,
  className,
}: {
  videoTrack: ICameraVideoTrack | IRemoteVideoTrack;
  className: string;
}) => {
  const ref = useRef(null);

  useEffect(() => {
    const playerRef = ref.current;
    if (!videoTrack || !playerRef) return;

    videoTrack.play(playerRef);

    return () => {
      videoTrack.stop();
    };
  }, [videoTrack]);

  return <div ref={ref} className={className}></div>;
};

const ChattingPage: NextPage = () => {
  const promiseRef = useRef<any>(Promise.resolve());

  const [userId] = useAtom(userIdAtom);
  const [, setDateIdGlobal] = useAtom(dateIdAtom);

  const router = useRouter();
  const dateId = router.query.dateId as string;

  const getFullDateQuery = trpc.useQuery([
    "dates.getFullDate",
    { dateId } as any,
  ]);
  const getTokenQuery = trpc.useQuery(
    ["dates.getToken", { userId, dateId } as any],
    {
      refetchOnWindowFocus: false,
      cacheTime: 0,
      staleTime: 0,
    },
  );

  const [otherUser, setOtherUser] = useState<IAgoraRTCRemoteUser>();
  const [personalVideoTrack, setPersonalVideoTrack] =
    useState<ICameraVideoTrack>();

  const setUserStatusMutation = trpc.useMutation("users.setStatus");
  const joinDateMutation = trpc.useMutation("dates.joinDate");

  useEffect(() => {
    if (!dateId) return;
    setDateIdGlobal(dateId);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    if (!userId) return;
    setUserStatusMutation.mutate({ userId, status: "chatting" } as any);
    joinDateMutation.mutate({ dateId, userId } as any);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      getFullDateQuery.refetch();
    }, 1000);

    if (getFullDateQuery.data?.endsOn) {
      clearInterval(interval);
    }

    return () => {
      clearInterval(interval);
    };
  }, [getFullDateQuery]);

  let otherUserName = "";

  if (getFullDateQuery.data) {
    const isCurrentlySinkUser = getFullDateQuery.data.sinkUserId === userId;
    otherUserName = isCurrentlySinkUser
      ? getFullDateQuery.data.sourceUser.name
      : getFullDateQuery.data.sinkUser.name;
  }

  const handleCountdownCompleted = () => {
    router.push("/done");
  };

  useEffect(() => {
    if (!userId) {
      router.push("/");
      return;
    }

    const token = getTokenQuery.data;
    if (!token) return;

    // connect to video using token
    const connect = async () => {
      const { default: AgoraRTC } = await import("agora-rtc-sdk-ng");
      const client = AgoraRTC.createClient({
        mode: "rtc",
        codec: "vp8",
      });

      await client.join(APP_ID, dateId, token, userId);

      client.on("user-published", (user, mediaType) => {
        client.subscribe(user, mediaType).then(() => {
          if (mediaType === "video") {
            setOtherUser(user);
          }
          if (mediaType === "audio") {
            user.audioTrack?.play();
          }
        });
      });

      const tracks = await AgoraRTC.createMicrophoneAndCameraTracks();
      setPersonalVideoTrack(tracks[1]);
      await client.publish(tracks);

      return { tracks, client };
    };

    const connection = connect();

    return () => {
      const disconnect = async () => {
        const { tracks, client } = await connection;

        client.removeAllListeners();
        tracks[0]?.stop();
        tracks[0]?.close();
        tracks[1]?.stop();
        tracks[1]?.close();

        await client.unpublish(tracks[1]);
        await client.leave();
      };
      disconnect();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [getTokenQuery.data]);

  return (
    <>
      <Head>
        <title>
          {(otherUserName && `Chatting with ${otherUserName}`) ||
            "Connecting to a user..."}
        </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col gap-6 items-center justify-center min-h-screen p-4">
        <h3 className="text-xl">
          {(otherUserName && `Chatting with ${otherUserName}`) ||
            "Chatting with a user"}
        </h3>
        {getFullDateQuery.data?.endsOn && (
          <Countdown
            date={parseInt(getFullDateQuery.data.endsOn)}
            onComplete={handleCountdownCompleted}
          />
        )}

        <div className="flex gap-8">
          {otherUser?.videoTrack && (
            <VideoPlayer
              className="w-[400px] h-[400px]"
              videoTrack={otherUser.videoTrack}
            />
          )}
          {personalVideoTrack && (
            <VideoPlayer
              className="w-[400px] h-[400px]"
              videoTrack={personalVideoTrack}
            />
          )}
        </div>
      </main>
    </>
  );
};

export default ChattingPage;
