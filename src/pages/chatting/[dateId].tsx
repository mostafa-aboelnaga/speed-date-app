import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../../utils/trpc";
import { useForm } from "react-hook-form";
import { Button, Form, Input } from "react-daisyui";
import { useAtom } from "jotai";
import { userIdAtom } from "../index";
import { useEffect, useRef, useState } from "react";
import { useRouter } from "next/router";
import {
  IAgoraRTCRemoteUser,
  ICameraVideoTrack,
  IRemoteVideoTrack,
} from "agora-rtc-sdk-ng";
import Countdown from "react-countdown";

const APP_ID = process.env.NEXT_PUBLIC_AGORA_APP_ID!;

const VideoPlayer = ({
  videoTrack,
  className,
}: {
  videoTrack: ICameraVideoTrack | IRemoteVideoTrack;
  className: string;
}) => {
  const ref = useRef(null);

  useEffect(() => {
    const playerRef = ref.current;

    if (!videoTrack || !playerRef) return;

    videoTrack.play(playerRef);
    return () => {
      videoTrack.stop();
    };
  }, [videoTrack]);

  return <div ref={ref} className={className}></div>;
};

const ChattingPage: NextPage = () => {
  const [timeLeft] = useState(Date.now() + 1000 * 20);

  const promiseRef = useRef<any>(Promise.resolve());
  const [userId, setUserId] = useAtom(userIdAtom);
  const router = useRouter();
  const dateId = router.query.dateId as string;
  console.log(dateId);
  const getDateUsersQuery = trpc.useQuery(["dates.getDateUsers", { dateId }]);
  const getTokenQuery = trpc.useQuery(["dates.getToken", { userId, dateId }], {
    refetchOnWindowFocus: false,
  });

  const [otherUser, setOtherUser] = useState<IAgoraRTCRemoteUser>();
  const [personalVideoTrack, setPersonalVideoTrack] =
    useState<ICameraVideoTrack>();

  const setStatusMutation = trpc.useMutation("users.setStatus");

  useEffect(() => {
    if (!userId) return;
    setStatusMutation.mutate({ userId, status: "chatting" });
  }, []);

  let otherUserName = "";

  if (getDateUsersQuery.data) {
    const isCurrentlySinkUser = getDateUsersQuery.data.sinkUserId === userId;
    otherUserName = isCurrentlySinkUser
      ? getDateUsersQuery.data.sourceUser.name
      : getDateUsersQuery.data.sinkUser.name;
  }

  const handleCountdownCompleted = () => {
    router.push("/done");
  };

  useEffect(() => {
    if (!userId) {
      router.push("/");
      return;
    }
    if (!getTokenQuery.data || !dateId || !router) return;

    // connect to video using token
    const connect = async () => {
      const token = getTokenQuery.data;

      const { default: AgoraRTC } = await import("agora-rtc-sdk-ng");
      const client = AgoraRTC.createClient({
        mode: "rtc",
        codec: "vp8",
      });

      await client.join(APP_ID, dateId, token, userId);

      client.on("user-published", (user, mediaType) => {
        client.subscribe(user, mediaType).then(() => {
          if (mediaType === "video") {
            setOtherUser(user);
          }
        });
      });

      const tracks = await AgoraRTC.createMicrophoneAndCameraTracks();
      setPersonalVideoTrack(tracks[1]);
      await client.publish(tracks);

      return { tracks, client };
    };

    promiseRef.current = promiseRef.current.then(connect);

    return () => {
      const disconnect = async () => {
        const { tracks, client } = await promiseRef.current;
        client.removeAllListeners();
        tracks[1]?.stop();
        tracks[1]?.close();

        await client.unpublish(tracks[1]);
        await client.leave();
      };
      promiseRef.current.then(disconnect);
    };
  }, [getTokenQuery.data, userId, dateId]);

  return (
    <>
      <Head>
        <title>
          {(otherUserName && `Chatting with ${otherUserName}`) ||
            "Connecting to a user..."}
        </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col gap-6 items-center justify-center min-h-screen p-4">
        <h3 className="text-xl">
          {(otherUserName && `Chatting with ${otherUserName}`) ||
            "Chatting with a user"}
        </h3>
        {getTokenQuery && (
          <Countdown date={timeLeft} onComplete={handleCountdownCompleted} />
        )}
        <div>
          {getTokenQuery.isLoading && <img src="/puff.svg" />}
          {getTokenQuery.data && <p>token: {getTokenQuery.data}</p>}
        </div>
        <div className="grid grid-cols-2">
          <div>
            {otherUser?.videoTrack && (
              <div>
                Remote
                <VideoPlayer
                  className="w-[300px] h-[300px]"
                  videoTrack={otherUser.videoTrack}
                />
              </div>
            )}
            {personalVideoTrack && (
              <div>
                Personal
                <VideoPlayer
                  className="w-[100px] h-[100px]"
                  videoTrack={personalVideoTrack}
                />
              </div>
            )}
          </div>
        </div>
        <div>Hello</div>
      </main>
    </>
  );
};

export default ChattingPage;
