import { useAtom } from "jotai";
import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { Button } from "react-daisyui";
import { trpc } from "../utils/trpc";
import { dateIdAtom } from "./chatting/[dateId]";
import { userIdAtom } from "./index";

const DonePage: NextPage = () => {
  const router = useRouter();
  const [userId, setUserId] = useAtom(userIdAtom);
  const [dateId] = useAtom(dateIdAtom);

  const [feedbackSent, setFeedbackSent] = useState(false);

  const postFeedbackMutation = trpc.useMutation("dates.postFeedback");
  const getFullDateQuery = trpc.useQuery(["dates.getFullDate", { dateId } as any], {
    refetchOnWindowFocus: false,
  });

  const handleFeedbackButtons = async (status: string) => {
    await postFeedbackMutation.mutateAsync({ userId, dateId, status } as any);
    setFeedbackSent(true);
  };

  // the interval trigger fetching if someone started a date with us
  useEffect(() => {
    if (bothFeedbacksProvided) return;
    console.log(getFullDateQuery?.data);
    const interval = setInterval(() => {
      getFullDateQuery.refetch();
    }, 1000);

    return () => {
      clearInterval(interval);
    };
  }, [getFullDateQuery]);

  const bothFeedbacksProvided =
    getFullDateQuery.data?.sinkUserFeedback &&
    getFullDateQuery.data?.sourceUserFeedback;

  const bothLiked =
    getFullDateQuery.data?.sinkUserFeedback! === "like" &&
    getFullDateQuery.data?.sourceUserFeedback === "like";

  const isSinkUser = getFullDateQuery.data?.sinkUserId === userId;
  const contactInfo = isSinkUser
    ? getFullDateQuery.data?.sourceUser.contactInfo
    : getFullDateQuery.data?.sinkUser.contactInfo;

  return (
    <>
      <Head>
        <title>Speed Date</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col gap-6 items-center justify-center min-h-screen p-4">
        <h3 className="text-xl">Your Session is Done!</h3>
        <h4 className="text-lg">What Do You Think of Your Date?</h4>
        <div className="flex gap-4">
          {!feedbackSent && (
            <>
              <Button
                onClick={() => handleFeedbackButtons("like")}
                color="success"
                className="w-64"
              >
                LIKE
              </Button>
              <Button
                onClick={() => handleFeedbackButtons("dislike")}
                color="error"
                className="w-64"
              >
                DISLIKE
              </Button>
            </>
          )}
        </div>

        {feedbackSent && !bothFeedbacksProvided && (
          <div>Waiting for your date's feedback...</div>
        )}

        {bothFeedbacksProvided && bothLiked && (
          <div>There you go! Here is their contact info: {contactInfo}</div>
        )}

        {bothFeedbacksProvided && !bothLiked && <div>Not a match!</div>}

        {bothFeedbacksProvided && (
          <Button
            onClick={() => {
              router.push("/waiting");
            }}
          >
            Go to Waiting Room
          </Button>
        )}
      </main>
    </>
  );
};

export default DonePage;
